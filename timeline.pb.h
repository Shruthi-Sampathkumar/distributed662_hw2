// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timeline.proto

#ifndef PROTOBUF_timeline_2eproto__INCLUDED
#define PROTOBUF_timeline_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_timeline_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsuserImpl();
void InitDefaultsuser();
void InitDefaultspostImpl();
void InitDefaultspost();
void InitDefaultsfollow_requestImpl();
void InitDefaultsfollow_request();
void InitDefaultsfollow_responseImpl();
void InitDefaultsfollow_response();
void InitDefaultsunfollow_requestImpl();
void InitDefaultsunfollow_request();
void InitDefaultsunfollow_responseImpl();
void InitDefaultsunfollow_response();
void InitDefaultslist_requestImpl();
void InitDefaultslist_request();
void InitDefaultslist_responseImpl();
void InitDefaultslist_response();
inline void InitDefaults() {
  InitDefaultsuser();
  InitDefaultspost();
  InitDefaultsfollow_request();
  InitDefaultsfollow_response();
  InitDefaultsunfollow_request();
  InitDefaultsunfollow_response();
  InitDefaultslist_request();
  InitDefaultslist_response();
}
}  // namespace protobuf_timeline_2eproto
namespace timeline {
class follow_request;
class follow_requestDefaultTypeInternal;
extern follow_requestDefaultTypeInternal _follow_request_default_instance_;
class follow_response;
class follow_responseDefaultTypeInternal;
extern follow_responseDefaultTypeInternal _follow_response_default_instance_;
class list_request;
class list_requestDefaultTypeInternal;
extern list_requestDefaultTypeInternal _list_request_default_instance_;
class list_response;
class list_responseDefaultTypeInternal;
extern list_responseDefaultTypeInternal _list_response_default_instance_;
class post;
class postDefaultTypeInternal;
extern postDefaultTypeInternal _post_default_instance_;
class unfollow_request;
class unfollow_requestDefaultTypeInternal;
extern unfollow_requestDefaultTypeInternal _unfollow_request_default_instance_;
class unfollow_response;
class unfollow_responseDefaultTypeInternal;
extern unfollow_responseDefaultTypeInternal _unfollow_response_default_instance_;
class user;
class userDefaultTypeInternal;
extern userDefaultTypeInternal _user_default_instance_;
}  // namespace timeline
namespace timeline {

// ===================================================================

class user : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.user) */ {
 public:
  user();
  virtual ~user();

  user(const user& from);

  inline user& operator=(const user& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  user(user&& from) noexcept
    : user() {
    *this = ::std::move(from);
  }

  inline user& operator=(user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user* internal_default_instance() {
    return reinterpret_cast<const user*>(
               &_user_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(user* other);
  friend void swap(user& a, user& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline user* New() const PROTOBUF_FINAL { return New(NULL); }

  user* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const user& from);
  void MergeFrom(const user& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(user* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:timeline.user)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultsuserImpl();
};
// -------------------------------------------------------------------

class post : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.post) */ {
 public:
  post();
  virtual ~post();

  post(const post& from);

  inline post& operator=(const post& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  post(post&& from) noexcept
    : post() {
    *this = ::std::move(from);
  }

  inline post& operator=(post&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const post& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const post* internal_default_instance() {
    return reinterpret_cast<const post*>(
               &_post_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(post* other);
  friend void swap(post& a, post& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline post* New() const PROTOBUF_FINAL { return New(NULL); }

  post* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const post& from);
  void MergeFrom(const post& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(post* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string content = 1;
  void clear_content();
  static const int kContentFieldNumber = 1;
  const ::std::string& content() const;
  void set_content(const ::std::string& value);
  #if LANG_CXX11
  void set_content(::std::string&& value);
  #endif
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  ::std::string* mutable_content();
  ::std::string* release_content();
  void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:timeline.post)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr content_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultspostImpl();
};
// -------------------------------------------------------------------

class follow_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.follow_request) */ {
 public:
  follow_request();
  virtual ~follow_request();

  follow_request(const follow_request& from);

  inline follow_request& operator=(const follow_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  follow_request(follow_request&& from) noexcept
    : follow_request() {
    *this = ::std::move(from);
  }

  inline follow_request& operator=(follow_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const follow_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const follow_request* internal_default_instance() {
    return reinterpret_cast<const follow_request*>(
               &_follow_request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(follow_request* other);
  friend void swap(follow_request& a, follow_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline follow_request* New() const PROTOBUF_FINAL { return New(NULL); }

  follow_request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const follow_request& from);
  void MergeFrom(const follow_request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(follow_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user1 = 1;
  void clear_user1();
  static const int kUser1FieldNumber = 1;
  const ::std::string& user1() const;
  void set_user1(const ::std::string& value);
  #if LANG_CXX11
  void set_user1(::std::string&& value);
  #endif
  void set_user1(const char* value);
  void set_user1(const char* value, size_t size);
  ::std::string* mutable_user1();
  ::std::string* release_user1();
  void set_allocated_user1(::std::string* user1);

  // string user2 = 2;
  void clear_user2();
  static const int kUser2FieldNumber = 2;
  const ::std::string& user2() const;
  void set_user2(const ::std::string& value);
  #if LANG_CXX11
  void set_user2(::std::string&& value);
  #endif
  void set_user2(const char* value);
  void set_user2(const char* value, size_t size);
  ::std::string* mutable_user2();
  ::std::string* release_user2();
  void set_allocated_user2(::std::string* user2);

  // @@protoc_insertion_point(class_scope:timeline.follow_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user1_;
  ::google::protobuf::internal::ArenaStringPtr user2_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultsfollow_requestImpl();
};
// -------------------------------------------------------------------

class follow_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.follow_response) */ {
 public:
  follow_response();
  virtual ~follow_response();

  follow_response(const follow_response& from);

  inline follow_response& operator=(const follow_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  follow_response(follow_response&& from) noexcept
    : follow_response() {
    *this = ::std::move(from);
  }

  inline follow_response& operator=(follow_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const follow_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const follow_response* internal_default_instance() {
    return reinterpret_cast<const follow_response*>(
               &_follow_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(follow_response* other);
  friend void swap(follow_response& a, follow_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline follow_response* New() const PROTOBUF_FINAL { return New(NULL); }

  follow_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const follow_response& from);
  void MergeFrom(const follow_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(follow_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 success_status = 1;
  void clear_success_status();
  static const int kSuccessStatusFieldNumber = 1;
  ::google::protobuf::int32 success_status() const;
  void set_success_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:timeline.follow_response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 success_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultsfollow_responseImpl();
};
// -------------------------------------------------------------------

class unfollow_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.unfollow_request) */ {
 public:
  unfollow_request();
  virtual ~unfollow_request();

  unfollow_request(const unfollow_request& from);

  inline unfollow_request& operator=(const unfollow_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  unfollow_request(unfollow_request&& from) noexcept
    : unfollow_request() {
    *this = ::std::move(from);
  }

  inline unfollow_request& operator=(unfollow_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const unfollow_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unfollow_request* internal_default_instance() {
    return reinterpret_cast<const unfollow_request*>(
               &_unfollow_request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(unfollow_request* other);
  friend void swap(unfollow_request& a, unfollow_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline unfollow_request* New() const PROTOBUF_FINAL { return New(NULL); }

  unfollow_request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const unfollow_request& from);
  void MergeFrom(const unfollow_request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(unfollow_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user1 = 1;
  void clear_user1();
  static const int kUser1FieldNumber = 1;
  const ::std::string& user1() const;
  void set_user1(const ::std::string& value);
  #if LANG_CXX11
  void set_user1(::std::string&& value);
  #endif
  void set_user1(const char* value);
  void set_user1(const char* value, size_t size);
  ::std::string* mutable_user1();
  ::std::string* release_user1();
  void set_allocated_user1(::std::string* user1);

  // string user2 = 2;
  void clear_user2();
  static const int kUser2FieldNumber = 2;
  const ::std::string& user2() const;
  void set_user2(const ::std::string& value);
  #if LANG_CXX11
  void set_user2(::std::string&& value);
  #endif
  void set_user2(const char* value);
  void set_user2(const char* value, size_t size);
  ::std::string* mutable_user2();
  ::std::string* release_user2();
  void set_allocated_user2(::std::string* user2);

  // @@protoc_insertion_point(class_scope:timeline.unfollow_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user1_;
  ::google::protobuf::internal::ArenaStringPtr user2_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultsunfollow_requestImpl();
};
// -------------------------------------------------------------------

class unfollow_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.unfollow_response) */ {
 public:
  unfollow_response();
  virtual ~unfollow_response();

  unfollow_response(const unfollow_response& from);

  inline unfollow_response& operator=(const unfollow_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  unfollow_response(unfollow_response&& from) noexcept
    : unfollow_response() {
    *this = ::std::move(from);
  }

  inline unfollow_response& operator=(unfollow_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const unfollow_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unfollow_response* internal_default_instance() {
    return reinterpret_cast<const unfollow_response*>(
               &_unfollow_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(unfollow_response* other);
  friend void swap(unfollow_response& a, unfollow_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline unfollow_response* New() const PROTOBUF_FINAL { return New(NULL); }

  unfollow_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const unfollow_response& from);
  void MergeFrom(const unfollow_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(unfollow_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 success_status = 1;
  void clear_success_status();
  static const int kSuccessStatusFieldNumber = 1;
  ::google::protobuf::int32 success_status() const;
  void set_success_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:timeline.unfollow_response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 success_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultsunfollow_responseImpl();
};
// -------------------------------------------------------------------

class list_request : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.list_request) */ {
 public:
  list_request();
  virtual ~list_request();

  list_request(const list_request& from);

  inline list_request& operator=(const list_request& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_request(list_request&& from) noexcept
    : list_request() {
    *this = ::std::move(from);
  }

  inline list_request& operator=(list_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const list_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_request* internal_default_instance() {
    return reinterpret_cast<const list_request*>(
               &_list_request_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(list_request* other);
  friend void swap(list_request& a, list_request& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_request* New() const PROTOBUF_FINAL { return New(NULL); }

  list_request* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const list_request& from);
  void MergeFrom(const list_request& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(list_request* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string user1 = 1;
  void clear_user1();
  static const int kUser1FieldNumber = 1;
  const ::std::string& user1() const;
  void set_user1(const ::std::string& value);
  #if LANG_CXX11
  void set_user1(::std::string&& value);
  #endif
  void set_user1(const char* value);
  void set_user1(const char* value, size_t size);
  ::std::string* mutable_user1();
  ::std::string* release_user1();
  void set_allocated_user1(::std::string* user1);

  // @@protoc_insertion_point(class_scope:timeline.list_request)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr user1_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultslist_requestImpl();
};
// -------------------------------------------------------------------

class list_response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:timeline.list_response) */ {
 public:
  list_response();
  virtual ~list_response();

  list_response(const list_response& from);

  inline list_response& operator=(const list_response& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  list_response(list_response&& from) noexcept
    : list_response() {
    *this = ::std::move(from);
  }

  inline list_response& operator=(list_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const list_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_response* internal_default_instance() {
    return reinterpret_cast<const list_response*>(
               &_list_response_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(list_response* other);
  friend void swap(list_response& a, list_response& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline list_response* New() const PROTOBUF_FINAL { return New(NULL); }

  list_response* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const list_response& from);
  void MergeFrom(const list_response& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(list_response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string followers = 2;
  int followers_size() const;
  void clear_followers();
  static const int kFollowersFieldNumber = 2;
  const ::std::string& followers(int index) const;
  ::std::string* mutable_followers(int index);
  void set_followers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_followers(int index, ::std::string&& value);
  #endif
  void set_followers(int index, const char* value);
  void set_followers(int index, const char* value, size_t size);
  ::std::string* add_followers();
  void add_followers(const ::std::string& value);
  #if LANG_CXX11
  void add_followers(::std::string&& value);
  #endif
  void add_followers(const char* value);
  void add_followers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& followers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_followers();

  // repeated string active_users = 3;
  int active_users_size() const;
  void clear_active_users();
  static const int kActiveUsersFieldNumber = 3;
  const ::std::string& active_users(int index) const;
  ::std::string* mutable_active_users(int index);
  void set_active_users(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_active_users(int index, ::std::string&& value);
  #endif
  void set_active_users(int index, const char* value);
  void set_active_users(int index, const char* value, size_t size);
  ::std::string* add_active_users();
  void add_active_users(const ::std::string& value);
  #if LANG_CXX11
  void add_active_users(::std::string&& value);
  #endif
  void add_active_users(const char* value);
  void add_active_users(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& active_users() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_active_users();

  // int32 success_status = 1;
  void clear_success_status();
  static const int kSuccessStatusFieldNumber = 1;
  ::google::protobuf::int32 success_status() const;
  void set_success_status(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:timeline.list_response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> followers_;
  ::google::protobuf::RepeatedPtrField< ::std::string> active_users_;
  ::google::protobuf::int32 success_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_timeline_2eproto::TableStruct;
  friend void ::protobuf_timeline_2eproto::InitDefaultslist_responseImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// user

// string name = 1;
inline void user::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& user::name() const {
  // @@protoc_insertion_point(field_get:timeline.user.name)
  return name_.GetNoArena();
}
inline void user::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.user.name)
}
#if LANG_CXX11
inline void user::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.user.name)
}
#endif
inline void user::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.user.name)
}
inline void user::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.user.name)
}
inline ::std::string* user::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:timeline.user.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* user::release_name() {
  // @@protoc_insertion_point(field_release:timeline.user.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void user::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:timeline.user.name)
}

// -------------------------------------------------------------------

// post

// string content = 1;
inline void post::clear_content() {
  content_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& post::content() const {
  // @@protoc_insertion_point(field_get:timeline.post.content)
  return content_.GetNoArena();
}
inline void post::set_content(const ::std::string& value) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.post.content)
}
#if LANG_CXX11
inline void post::set_content(::std::string&& value) {
  
  content_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.post.content)
}
#endif
inline void post::set_content(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.post.content)
}
inline void post::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.post.content)
}
inline ::std::string* post::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:timeline.post.content)
  return content_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* post::release_content() {
  // @@protoc_insertion_point(field_release:timeline.post.content)
  
  return content_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void post::set_allocated_content(::std::string* content) {
  if (content != NULL) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:timeline.post.content)
}

// -------------------------------------------------------------------

// follow_request

// string user1 = 1;
inline void follow_request::clear_user1() {
  user1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& follow_request::user1() const {
  // @@protoc_insertion_point(field_get:timeline.follow_request.user1)
  return user1_.GetNoArena();
}
inline void follow_request::set_user1(const ::std::string& value) {
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.follow_request.user1)
}
#if LANG_CXX11
inline void follow_request::set_user1(::std::string&& value) {
  
  user1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.follow_request.user1)
}
#endif
inline void follow_request::set_user1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.follow_request.user1)
}
inline void follow_request::set_user1(const char* value, size_t size) {
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.follow_request.user1)
}
inline ::std::string* follow_request::mutable_user1() {
  
  // @@protoc_insertion_point(field_mutable:timeline.follow_request.user1)
  return user1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* follow_request::release_user1() {
  // @@protoc_insertion_point(field_release:timeline.follow_request.user1)
  
  return user1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void follow_request::set_allocated_user1(::std::string* user1) {
  if (user1 != NULL) {
    
  } else {
    
  }
  user1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user1);
  // @@protoc_insertion_point(field_set_allocated:timeline.follow_request.user1)
}

// string user2 = 2;
inline void follow_request::clear_user2() {
  user2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& follow_request::user2() const {
  // @@protoc_insertion_point(field_get:timeline.follow_request.user2)
  return user2_.GetNoArena();
}
inline void follow_request::set_user2(const ::std::string& value) {
  
  user2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.follow_request.user2)
}
#if LANG_CXX11
inline void follow_request::set_user2(::std::string&& value) {
  
  user2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.follow_request.user2)
}
#endif
inline void follow_request::set_user2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.follow_request.user2)
}
inline void follow_request::set_user2(const char* value, size_t size) {
  
  user2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.follow_request.user2)
}
inline ::std::string* follow_request::mutable_user2() {
  
  // @@protoc_insertion_point(field_mutable:timeline.follow_request.user2)
  return user2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* follow_request::release_user2() {
  // @@protoc_insertion_point(field_release:timeline.follow_request.user2)
  
  return user2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void follow_request::set_allocated_user2(::std::string* user2) {
  if (user2 != NULL) {
    
  } else {
    
  }
  user2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user2);
  // @@protoc_insertion_point(field_set_allocated:timeline.follow_request.user2)
}

// -------------------------------------------------------------------

// follow_response

// int32 success_status = 1;
inline void follow_response::clear_success_status() {
  success_status_ = 0;
}
inline ::google::protobuf::int32 follow_response::success_status() const {
  // @@protoc_insertion_point(field_get:timeline.follow_response.success_status)
  return success_status_;
}
inline void follow_response::set_success_status(::google::protobuf::int32 value) {
  
  success_status_ = value;
  // @@protoc_insertion_point(field_set:timeline.follow_response.success_status)
}

// -------------------------------------------------------------------

// unfollow_request

// string user1 = 1;
inline void unfollow_request::clear_user1() {
  user1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& unfollow_request::user1() const {
  // @@protoc_insertion_point(field_get:timeline.unfollow_request.user1)
  return user1_.GetNoArena();
}
inline void unfollow_request::set_user1(const ::std::string& value) {
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.unfollow_request.user1)
}
#if LANG_CXX11
inline void unfollow_request::set_user1(::std::string&& value) {
  
  user1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.unfollow_request.user1)
}
#endif
inline void unfollow_request::set_user1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.unfollow_request.user1)
}
inline void unfollow_request::set_user1(const char* value, size_t size) {
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.unfollow_request.user1)
}
inline ::std::string* unfollow_request::mutable_user1() {
  
  // @@protoc_insertion_point(field_mutable:timeline.unfollow_request.user1)
  return user1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* unfollow_request::release_user1() {
  // @@protoc_insertion_point(field_release:timeline.unfollow_request.user1)
  
  return user1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void unfollow_request::set_allocated_user1(::std::string* user1) {
  if (user1 != NULL) {
    
  } else {
    
  }
  user1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user1);
  // @@protoc_insertion_point(field_set_allocated:timeline.unfollow_request.user1)
}

// string user2 = 2;
inline void unfollow_request::clear_user2() {
  user2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& unfollow_request::user2() const {
  // @@protoc_insertion_point(field_get:timeline.unfollow_request.user2)
  return user2_.GetNoArena();
}
inline void unfollow_request::set_user2(const ::std::string& value) {
  
  user2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.unfollow_request.user2)
}
#if LANG_CXX11
inline void unfollow_request::set_user2(::std::string&& value) {
  
  user2_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.unfollow_request.user2)
}
#endif
inline void unfollow_request::set_user2(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.unfollow_request.user2)
}
inline void unfollow_request::set_user2(const char* value, size_t size) {
  
  user2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.unfollow_request.user2)
}
inline ::std::string* unfollow_request::mutable_user2() {
  
  // @@protoc_insertion_point(field_mutable:timeline.unfollow_request.user2)
  return user2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* unfollow_request::release_user2() {
  // @@protoc_insertion_point(field_release:timeline.unfollow_request.user2)
  
  return user2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void unfollow_request::set_allocated_user2(::std::string* user2) {
  if (user2 != NULL) {
    
  } else {
    
  }
  user2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user2);
  // @@protoc_insertion_point(field_set_allocated:timeline.unfollow_request.user2)
}

// -------------------------------------------------------------------

// unfollow_response

// int32 success_status = 1;
inline void unfollow_response::clear_success_status() {
  success_status_ = 0;
}
inline ::google::protobuf::int32 unfollow_response::success_status() const {
  // @@protoc_insertion_point(field_get:timeline.unfollow_response.success_status)
  return success_status_;
}
inline void unfollow_response::set_success_status(::google::protobuf::int32 value) {
  
  success_status_ = value;
  // @@protoc_insertion_point(field_set:timeline.unfollow_response.success_status)
}

// -------------------------------------------------------------------

// list_request

// string user1 = 1;
inline void list_request::clear_user1() {
  user1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& list_request::user1() const {
  // @@protoc_insertion_point(field_get:timeline.list_request.user1)
  return user1_.GetNoArena();
}
inline void list_request::set_user1(const ::std::string& value) {
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.list_request.user1)
}
#if LANG_CXX11
inline void list_request::set_user1(::std::string&& value) {
  
  user1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.list_request.user1)
}
#endif
inline void list_request::set_user1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.list_request.user1)
}
inline void list_request::set_user1(const char* value, size_t size) {
  
  user1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.list_request.user1)
}
inline ::std::string* list_request::mutable_user1() {
  
  // @@protoc_insertion_point(field_mutable:timeline.list_request.user1)
  return user1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* list_request::release_user1() {
  // @@protoc_insertion_point(field_release:timeline.list_request.user1)
  
  return user1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void list_request::set_allocated_user1(::std::string* user1) {
  if (user1 != NULL) {
    
  } else {
    
  }
  user1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), user1);
  // @@protoc_insertion_point(field_set_allocated:timeline.list_request.user1)
}

// -------------------------------------------------------------------

// list_response

// int32 success_status = 1;
inline void list_response::clear_success_status() {
  success_status_ = 0;
}
inline ::google::protobuf::int32 list_response::success_status() const {
  // @@protoc_insertion_point(field_get:timeline.list_response.success_status)
  return success_status_;
}
inline void list_response::set_success_status(::google::protobuf::int32 value) {
  
  success_status_ = value;
  // @@protoc_insertion_point(field_set:timeline.list_response.success_status)
}

// repeated string followers = 2;
inline int list_response::followers_size() const {
  return followers_.size();
}
inline void list_response::clear_followers() {
  followers_.Clear();
}
inline const ::std::string& list_response::followers(int index) const {
  // @@protoc_insertion_point(field_get:timeline.list_response.followers)
  return followers_.Get(index);
}
inline ::std::string* list_response::mutable_followers(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.list_response.followers)
  return followers_.Mutable(index);
}
inline void list_response::set_followers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:timeline.list_response.followers)
  followers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void list_response::set_followers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:timeline.list_response.followers)
  followers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void list_response::set_followers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  followers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:timeline.list_response.followers)
}
inline void list_response::set_followers(int index, const char* value, size_t size) {
  followers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:timeline.list_response.followers)
}
inline ::std::string* list_response::add_followers() {
  // @@protoc_insertion_point(field_add_mutable:timeline.list_response.followers)
  return followers_.Add();
}
inline void list_response::add_followers(const ::std::string& value) {
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:timeline.list_response.followers)
}
#if LANG_CXX11
inline void list_response::add_followers(::std::string&& value) {
  followers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:timeline.list_response.followers)
}
#endif
inline void list_response::add_followers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:timeline.list_response.followers)
}
inline void list_response::add_followers(const char* value, size_t size) {
  followers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:timeline.list_response.followers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
list_response::followers() const {
  // @@protoc_insertion_point(field_list:timeline.list_response.followers)
  return followers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
list_response::mutable_followers() {
  // @@protoc_insertion_point(field_mutable_list:timeline.list_response.followers)
  return &followers_;
}

// repeated string active_users = 3;
inline int list_response::active_users_size() const {
  return active_users_.size();
}
inline void list_response::clear_active_users() {
  active_users_.Clear();
}
inline const ::std::string& list_response::active_users(int index) const {
  // @@protoc_insertion_point(field_get:timeline.list_response.active_users)
  return active_users_.Get(index);
}
inline ::std::string* list_response::mutable_active_users(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.list_response.active_users)
  return active_users_.Mutable(index);
}
inline void list_response::set_active_users(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:timeline.list_response.active_users)
  active_users_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void list_response::set_active_users(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:timeline.list_response.active_users)
  active_users_.Mutable(index)->assign(std::move(value));
}
#endif
inline void list_response::set_active_users(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  active_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:timeline.list_response.active_users)
}
inline void list_response::set_active_users(int index, const char* value, size_t size) {
  active_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:timeline.list_response.active_users)
}
inline ::std::string* list_response::add_active_users() {
  // @@protoc_insertion_point(field_add_mutable:timeline.list_response.active_users)
  return active_users_.Add();
}
inline void list_response::add_active_users(const ::std::string& value) {
  active_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:timeline.list_response.active_users)
}
#if LANG_CXX11
inline void list_response::add_active_users(::std::string&& value) {
  active_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:timeline.list_response.active_users)
}
#endif
inline void list_response::add_active_users(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  active_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:timeline.list_response.active_users)
}
inline void list_response::add_active_users(const char* value, size_t size) {
  active_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:timeline.list_response.active_users)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
list_response::active_users() const {
  // @@protoc_insertion_point(field_list:timeline.list_response.active_users)
  return active_users_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
list_response::mutable_active_users() {
  // @@protoc_insertion_point(field_mutable_list:timeline.list_response.active_users)
  return &active_users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace timeline

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_timeline_2eproto__INCLUDED
