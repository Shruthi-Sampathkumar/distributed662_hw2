// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: timeline.proto
#ifndef GRPC_timeline_2eproto__INCLUDED
#define GRPC_timeline_2eproto__INCLUDED

#include "timeline.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/proto_utils.h>
#include <grpc++/impl/codegen/rpc_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/status.h>
#include <grpc++/impl/codegen/stub_options.h>
#include <grpc++/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace timeline {

class social_network final {
 public:
  static constexpr char const* service_full_name() {
    return "timeline.social_network";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status addTo(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::timeline::follow_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::follow_response>> AsyncaddTo(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::follow_response>>(AsyncaddToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::follow_response>> PrepareAsyncaddTo(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::follow_response>>(PrepareAsyncaddToRaw(context, request, cq));
    }
    virtual ::grpc::Status removeFrom(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::timeline::unfollow_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::unfollow_response>> AsyncremoveFrom(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::unfollow_response>>(AsyncremoveFromRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::unfollow_response>> PrepareAsyncremoveFrom(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::unfollow_response>>(PrepareAsyncremoveFromRaw(context, request, cq));
    }
    virtual ::grpc::Status getFollowersUsers(::grpc::ClientContext* context, const ::timeline::list_request& request, ::timeline::list_response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::list_response>> AsyncgetFollowersUsers(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::list_response>>(AsyncgetFollowersUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::list_response>> PrepareAsyncgetFollowersUsers(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::timeline::list_response>>(PrepareAsyncgetFollowersUsersRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::timeline::follow_response>* AsyncaddToRaw(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::timeline::follow_response>* PrepareAsyncaddToRaw(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::timeline::unfollow_response>* AsyncremoveFromRaw(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::timeline::unfollow_response>* PrepareAsyncremoveFromRaw(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::timeline::list_response>* AsyncgetFollowersUsersRaw(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::timeline::list_response>* PrepareAsyncgetFollowersUsersRaw(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status addTo(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::timeline::follow_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::follow_response>> AsyncaddTo(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::follow_response>>(AsyncaddToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::follow_response>> PrepareAsyncaddTo(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::follow_response>>(PrepareAsyncaddToRaw(context, request, cq));
    }
    ::grpc::Status removeFrom(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::timeline::unfollow_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::unfollow_response>> AsyncremoveFrom(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::unfollow_response>>(AsyncremoveFromRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::unfollow_response>> PrepareAsyncremoveFrom(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::unfollow_response>>(PrepareAsyncremoveFromRaw(context, request, cq));
    }
    ::grpc::Status getFollowersUsers(::grpc::ClientContext* context, const ::timeline::list_request& request, ::timeline::list_response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::list_response>> AsyncgetFollowersUsers(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::list_response>>(AsyncgetFollowersUsersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::list_response>> PrepareAsyncgetFollowersUsers(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::timeline::list_response>>(PrepareAsyncgetFollowersUsersRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::timeline::follow_response>* AsyncaddToRaw(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::timeline::follow_response>* PrepareAsyncaddToRaw(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::timeline::unfollow_response>* AsyncremoveFromRaw(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::timeline::unfollow_response>* PrepareAsyncremoveFromRaw(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::timeline::list_response>* AsyncgetFollowersUsersRaw(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::timeline::list_response>* PrepareAsyncgetFollowersUsersRaw(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_addTo_;
    const ::grpc::internal::RpcMethod rpcmethod_removeFrom_;
    const ::grpc::internal::RpcMethod rpcmethod_getFollowersUsers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status addTo(::grpc::ServerContext* context, const ::timeline::follow_request* request, ::timeline::follow_response* response);
    virtual ::grpc::Status removeFrom(::grpc::ServerContext* context, const ::timeline::unfollow_request* request, ::timeline::unfollow_response* response);
    virtual ::grpc::Status getFollowersUsers(::grpc::ServerContext* context, const ::timeline::list_request* request, ::timeline::list_response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_addTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_addTo() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_addTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTo(::grpc::ServerContext* context, const ::timeline::follow_request* request, ::timeline::follow_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestaddTo(::grpc::ServerContext* context, ::timeline::follow_request* request, ::grpc::ServerAsyncResponseWriter< ::timeline::follow_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_removeFrom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_removeFrom() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_removeFrom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeFrom(::grpc::ServerContext* context, const ::timeline::unfollow_request* request, ::timeline::unfollow_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestremoveFrom(::grpc::ServerContext* context, ::timeline::unfollow_request* request, ::grpc::ServerAsyncResponseWriter< ::timeline::unfollow_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_getFollowersUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_getFollowersUsers() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_getFollowersUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFollowersUsers(::grpc::ServerContext* context, const ::timeline::list_request* request, ::timeline::list_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestgetFollowersUsers(::grpc::ServerContext* context, ::timeline::list_request* request, ::grpc::ServerAsyncResponseWriter< ::timeline::list_response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_addTo<WithAsyncMethod_removeFrom<WithAsyncMethod_getFollowersUsers<Service > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_addTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_addTo() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_addTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status addTo(::grpc::ServerContext* context, const ::timeline::follow_request* request, ::timeline::follow_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_removeFrom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_removeFrom() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_removeFrom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status removeFrom(::grpc::ServerContext* context, const ::timeline::unfollow_request* request, ::timeline::unfollow_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_getFollowersUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_getFollowersUsers() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_getFollowersUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status getFollowersUsers(::grpc::ServerContext* context, const ::timeline::list_request* request, ::timeline::list_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_addTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_addTo() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::timeline::follow_request, ::timeline::follow_response>(std::bind(&WithStreamedUnaryMethod_addTo<BaseClass>::StreamedaddTo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_addTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status addTo(::grpc::ServerContext* context, const ::timeline::follow_request* request, ::timeline::follow_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedaddTo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::timeline::follow_request,::timeline::follow_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_removeFrom : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_removeFrom() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::timeline::unfollow_request, ::timeline::unfollow_response>(std::bind(&WithStreamedUnaryMethod_removeFrom<BaseClass>::StreamedremoveFrom, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_removeFrom() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status removeFrom(::grpc::ServerContext* context, const ::timeline::unfollow_request* request, ::timeline::unfollow_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedremoveFrom(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::timeline::unfollow_request,::timeline::unfollow_response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_getFollowersUsers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_getFollowersUsers() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::timeline::list_request, ::timeline::list_response>(std::bind(&WithStreamedUnaryMethod_getFollowersUsers<BaseClass>::StreamedgetFollowersUsers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_getFollowersUsers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status getFollowersUsers(::grpc::ServerContext* context, const ::timeline::list_request* request, ::timeline::list_response* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedgetFollowersUsers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::timeline::list_request,::timeline::list_response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_addTo<WithStreamedUnaryMethod_removeFrom<WithStreamedUnaryMethod_getFollowersUsers<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_addTo<WithStreamedUnaryMethod_removeFrom<WithStreamedUnaryMethod_getFollowersUsers<Service > > > StreamedService;
};

}  // namespace timeline


#endif  // GRPC_timeline_2eproto__INCLUDED
