// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: timeline.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_timeline_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_timeline_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_timeline_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_timeline_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_timeline_2eproto;
namespace timeline {
class follow_request;
class follow_requestDefaultTypeInternal;
extern follow_requestDefaultTypeInternal _follow_request_default_instance_;
class follow_response;
class follow_responseDefaultTypeInternal;
extern follow_responseDefaultTypeInternal _follow_response_default_instance_;
class list_request;
class list_requestDefaultTypeInternal;
extern list_requestDefaultTypeInternal _list_request_default_instance_;
class list_response;
class list_responseDefaultTypeInternal;
extern list_responseDefaultTypeInternal _list_response_default_instance_;
class post;
class postDefaultTypeInternal;
extern postDefaultTypeInternal _post_default_instance_;
class unfollow_request;
class unfollow_requestDefaultTypeInternal;
extern unfollow_requestDefaultTypeInternal _unfollow_request_default_instance_;
class unfollow_response;
class unfollow_responseDefaultTypeInternal;
extern unfollow_responseDefaultTypeInternal _unfollow_response_default_instance_;
class user;
class userDefaultTypeInternal;
extern userDefaultTypeInternal _user_default_instance_;
}  // namespace timeline
PROTOBUF_NAMESPACE_OPEN
template<> ::timeline::follow_request* Arena::CreateMaybeMessage<::timeline::follow_request>(Arena*);
template<> ::timeline::follow_response* Arena::CreateMaybeMessage<::timeline::follow_response>(Arena*);
template<> ::timeline::list_request* Arena::CreateMaybeMessage<::timeline::list_request>(Arena*);
template<> ::timeline::list_response* Arena::CreateMaybeMessage<::timeline::list_response>(Arena*);
template<> ::timeline::post* Arena::CreateMaybeMessage<::timeline::post>(Arena*);
template<> ::timeline::unfollow_request* Arena::CreateMaybeMessage<::timeline::unfollow_request>(Arena*);
template<> ::timeline::unfollow_response* Arena::CreateMaybeMessage<::timeline::unfollow_response>(Arena*);
template<> ::timeline::user* Arena::CreateMaybeMessage<::timeline::user>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace timeline {

// ===================================================================

class user :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.user) */ {
 public:
  user();
  virtual ~user();

  user(const user& from);
  user(user&& from) noexcept
    : user() {
    *this = ::std::move(from);
  }

  inline user& operator=(const user& from) {
    CopyFrom(from);
    return *this;
  }
  inline user& operator=(user&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const user& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const user* internal_default_instance() {
    return reinterpret_cast<const user*>(
               &_user_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(user& a, user& b) {
    a.Swap(&b);
  }
  inline void Swap(user* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline user* New() const final {
    return CreateMaybeMessage<user>(nullptr);
  }

  user* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<user>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const user& from);
  void MergeFrom(const user& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(user* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.user";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);

  // @@protoc_insertion_point(class_scope:timeline.user)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class post :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.post) */ {
 public:
  post();
  virtual ~post();

  post(const post& from);
  post(post&& from) noexcept
    : post() {
    *this = ::std::move(from);
  }

  inline post& operator=(const post& from) {
    CopyFrom(from);
    return *this;
  }
  inline post& operator=(post&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const post& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const post* internal_default_instance() {
    return reinterpret_cast<const post*>(
               &_post_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(post& a, post& b) {
    a.Swap(&b);
  }
  inline void Swap(post* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline post* New() const final {
    return CreateMaybeMessage<post>(nullptr);
  }

  post* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<post>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const post& from);
  void MergeFrom(const post& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(post* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.post";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 1,
    kOwnerFieldNumber = 2,
  };
  // string content = 1;
  void clear_content();
  const std::string& content() const;
  void set_content(const std::string& value);
  void set_content(std::string&& value);
  void set_content(const char* value);
  void set_content(const char* value, size_t size);
  std::string* mutable_content();
  std::string* release_content();
  void set_allocated_content(std::string* content);

  // string owner = 2;
  void clear_owner();
  const std::string& owner() const;
  void set_owner(const std::string& value);
  void set_owner(std::string&& value);
  void set_owner(const char* value);
  void set_owner(const char* value, size_t size);
  std::string* mutable_owner();
  std::string* release_owner();
  void set_allocated_owner(std::string* owner);

  // @@protoc_insertion_point(class_scope:timeline.post)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class follow_request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.follow_request) */ {
 public:
  follow_request();
  virtual ~follow_request();

  follow_request(const follow_request& from);
  follow_request(follow_request&& from) noexcept
    : follow_request() {
    *this = ::std::move(from);
  }

  inline follow_request& operator=(const follow_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline follow_request& operator=(follow_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const follow_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const follow_request* internal_default_instance() {
    return reinterpret_cast<const follow_request*>(
               &_follow_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(follow_request& a, follow_request& b) {
    a.Swap(&b);
  }
  inline void Swap(follow_request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline follow_request* New() const final {
    return CreateMaybeMessage<follow_request>(nullptr);
  }

  follow_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<follow_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const follow_request& from);
  void MergeFrom(const follow_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(follow_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.follow_request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUser1FieldNumber = 1,
    kUser2FieldNumber = 2,
  };
  // .timeline.user user1 = 1;
  bool has_user1() const;
  void clear_user1();
  const ::timeline::user& user1() const;
  ::timeline::user* release_user1();
  ::timeline::user* mutable_user1();
  void set_allocated_user1(::timeline::user* user1);

  // .timeline.user user2 = 2;
  bool has_user2() const;
  void clear_user2();
  const ::timeline::user& user2() const;
  ::timeline::user* release_user2();
  ::timeline::user* mutable_user2();
  void set_allocated_user2(::timeline::user* user2);

  // @@protoc_insertion_point(class_scope:timeline.follow_request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::timeline::user* user1_;
  ::timeline::user* user2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class follow_response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.follow_response) */ {
 public:
  follow_response();
  virtual ~follow_response();

  follow_response(const follow_response& from);
  follow_response(follow_response&& from) noexcept
    : follow_response() {
    *this = ::std::move(from);
  }

  inline follow_response& operator=(const follow_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline follow_response& operator=(follow_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const follow_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const follow_response* internal_default_instance() {
    return reinterpret_cast<const follow_response*>(
               &_follow_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(follow_response& a, follow_response& b) {
    a.Swap(&b);
  }
  inline void Swap(follow_response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline follow_response* New() const final {
    return CreateMaybeMessage<follow_response>(nullptr);
  }

  follow_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<follow_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const follow_response& from);
  void MergeFrom(const follow_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(follow_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.follow_response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessStatusFieldNumber = 1,
  };
  // int32 success_status = 1;
  void clear_success_status();
  ::PROTOBUF_NAMESPACE_ID::int32 success_status() const;
  void set_success_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:timeline.follow_response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 success_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class unfollow_request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.unfollow_request) */ {
 public:
  unfollow_request();
  virtual ~unfollow_request();

  unfollow_request(const unfollow_request& from);
  unfollow_request(unfollow_request&& from) noexcept
    : unfollow_request() {
    *this = ::std::move(from);
  }

  inline unfollow_request& operator=(const unfollow_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline unfollow_request& operator=(unfollow_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const unfollow_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unfollow_request* internal_default_instance() {
    return reinterpret_cast<const unfollow_request*>(
               &_unfollow_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(unfollow_request& a, unfollow_request& b) {
    a.Swap(&b);
  }
  inline void Swap(unfollow_request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline unfollow_request* New() const final {
    return CreateMaybeMessage<unfollow_request>(nullptr);
  }

  unfollow_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<unfollow_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const unfollow_request& from);
  void MergeFrom(const unfollow_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unfollow_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.unfollow_request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUser1FieldNumber = 1,
    kUser2FieldNumber = 2,
  };
  // .timeline.user user1 = 1;
  bool has_user1() const;
  void clear_user1();
  const ::timeline::user& user1() const;
  ::timeline::user* release_user1();
  ::timeline::user* mutable_user1();
  void set_allocated_user1(::timeline::user* user1);

  // .timeline.user user2 = 2;
  bool has_user2() const;
  void clear_user2();
  const ::timeline::user& user2() const;
  ::timeline::user* release_user2();
  ::timeline::user* mutable_user2();
  void set_allocated_user2(::timeline::user* user2);

  // @@protoc_insertion_point(class_scope:timeline.unfollow_request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::timeline::user* user1_;
  ::timeline::user* user2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class unfollow_response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.unfollow_response) */ {
 public:
  unfollow_response();
  virtual ~unfollow_response();

  unfollow_response(const unfollow_response& from);
  unfollow_response(unfollow_response&& from) noexcept
    : unfollow_response() {
    *this = ::std::move(from);
  }

  inline unfollow_response& operator=(const unfollow_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline unfollow_response& operator=(unfollow_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const unfollow_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const unfollow_response* internal_default_instance() {
    return reinterpret_cast<const unfollow_response*>(
               &_unfollow_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(unfollow_response& a, unfollow_response& b) {
    a.Swap(&b);
  }
  inline void Swap(unfollow_response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline unfollow_response* New() const final {
    return CreateMaybeMessage<unfollow_response>(nullptr);
  }

  unfollow_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<unfollow_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const unfollow_response& from);
  void MergeFrom(const unfollow_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(unfollow_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.unfollow_response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessStatusFieldNumber = 1,
  };
  // int32 success_status = 1;
  void clear_success_status();
  ::PROTOBUF_NAMESPACE_ID::int32 success_status() const;
  void set_success_status(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:timeline.unfollow_response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 success_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class list_request :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.list_request) */ {
 public:
  list_request();
  virtual ~list_request();

  list_request(const list_request& from);
  list_request(list_request&& from) noexcept
    : list_request() {
    *this = ::std::move(from);
  }

  inline list_request& operator=(const list_request& from) {
    CopyFrom(from);
    return *this;
  }
  inline list_request& operator=(list_request&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const list_request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_request* internal_default_instance() {
    return reinterpret_cast<const list_request*>(
               &_list_request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(list_request& a, list_request& b) {
    a.Swap(&b);
  }
  inline void Swap(list_request* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline list_request* New() const final {
    return CreateMaybeMessage<list_request>(nullptr);
  }

  list_request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<list_request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const list_request& from);
  void MergeFrom(const list_request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.list_request";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUser1FieldNumber = 1,
  };
  // .timeline.user user1 = 1;
  bool has_user1() const;
  void clear_user1();
  const ::timeline::user& user1() const;
  ::timeline::user* release_user1();
  ::timeline::user* mutable_user1();
  void set_allocated_user1(::timeline::user* user1);

  // @@protoc_insertion_point(class_scope:timeline.list_request)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::timeline::user* user1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_timeline_2eproto;
};
// -------------------------------------------------------------------

class list_response :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:timeline.list_response) */ {
 public:
  list_response();
  virtual ~list_response();

  list_response(const list_response& from);
  list_response(list_response&& from) noexcept
    : list_response() {
    *this = ::std::move(from);
  }

  inline list_response& operator=(const list_response& from) {
    CopyFrom(from);
    return *this;
  }
  inline list_response& operator=(list_response&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const list_response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const list_response* internal_default_instance() {
    return reinterpret_cast<const list_response*>(
               &_list_response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(list_response& a, list_response& b) {
    a.Swap(&b);
  }
  inline void Swap(list_response* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline list_response* New() const final {
    return CreateMaybeMessage<list_response>(nullptr);
  }

  list_response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<list_response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const list_response& from);
  void MergeFrom(const list_response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(list_response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "timeline.list_response";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_timeline_2eproto);
    return ::descriptor_table_timeline_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFollowersFieldNumber = 1,
    kActiveUsersFieldNumber = 2,
  };
  // repeated string followers = 1;
  int followers_size() const;
  void clear_followers();
  const std::string& followers(int index) const;
  std::string* mutable_followers(int index);
  void set_followers(int index, const std::string& value);
  void set_followers(int index, std::string&& value);
  void set_followers(int index, const char* value);
  void set_followers(int index, const char* value, size_t size);
  std::string* add_followers();
  void add_followers(const std::string& value);
  void add_followers(std::string&& value);
  void add_followers(const char* value);
  void add_followers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& followers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_followers();

  // repeated string active_users = 2;
  int active_users_size() const;
  void clear_active_users();
  const std::string& active_users(int index) const;
  std::string* mutable_active_users(int index);
  void set_active_users(int index, const std::string& value);
  void set_active_users(int index, std::string&& value);
  void set_active_users(int index, const char* value);
  void set_active_users(int index, const char* value, size_t size);
  std::string* add_active_users();
  void add_active_users(const std::string& value);
  void add_active_users(std::string&& value);
  void add_active_users(const char* value);
  void add_active_users(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& active_users() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_active_users();

  // @@protoc_insertion_point(class_scope:timeline.list_response)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> followers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> active_users_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_timeline_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// user

// string name = 1;
inline void user::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& user::name() const {
  // @@protoc_insertion_point(field_get:timeline.user.name)
  return name_.GetNoArena();
}
inline void user::set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.user.name)
}
inline void user::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.user.name)
}
inline void user::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.user.name)
}
inline void user::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.user.name)
}
inline std::string* user::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:timeline.user.name)
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* user::release_name() {
  // @@protoc_insertion_point(field_release:timeline.user.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void user::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:timeline.user.name)
}

// -------------------------------------------------------------------

// post

// string content = 1;
inline void post::clear_content() {
  content_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& post::content() const {
  // @@protoc_insertion_point(field_get:timeline.post.content)
  return content_.GetNoArena();
}
inline void post::set_content(const std::string& value) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.post.content)
}
inline void post::set_content(std::string&& value) {
  
  content_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.post.content)
}
inline void post::set_content(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.post.content)
}
inline void post::set_content(const char* value, size_t size) {
  
  content_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.post.content)
}
inline std::string* post::mutable_content() {
  
  // @@protoc_insertion_point(field_mutable:timeline.post.content)
  return content_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* post::release_content() {
  // @@protoc_insertion_point(field_release:timeline.post.content)
  
  return content_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void post::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content);
  // @@protoc_insertion_point(field_set_allocated:timeline.post.content)
}

// string owner = 2;
inline void post::clear_owner() {
  owner_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& post::owner() const {
  // @@protoc_insertion_point(field_get:timeline.post.owner)
  return owner_.GetNoArena();
}
inline void post::set_owner(const std::string& value) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:timeline.post.owner)
}
inline void post::set_owner(std::string&& value) {
  
  owner_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:timeline.post.owner)
}
inline void post::set_owner(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:timeline.post.owner)
}
inline void post::set_owner(const char* value, size_t size) {
  
  owner_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:timeline.post.owner)
}
inline std::string* post::mutable_owner() {
  
  // @@protoc_insertion_point(field_mutable:timeline.post.owner)
  return owner_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* post::release_owner() {
  // @@protoc_insertion_point(field_release:timeline.post.owner)
  
  return owner_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void post::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner);
  // @@protoc_insertion_point(field_set_allocated:timeline.post.owner)
}

// -------------------------------------------------------------------

// follow_request

// .timeline.user user1 = 1;
inline bool follow_request::has_user1() const {
  return this != internal_default_instance() && user1_ != nullptr;
}
inline void follow_request::clear_user1() {
  if (GetArenaNoVirtual() == nullptr && user1_ != nullptr) {
    delete user1_;
  }
  user1_ = nullptr;
}
inline const ::timeline::user& follow_request::user1() const {
  const ::timeline::user* p = user1_;
  // @@protoc_insertion_point(field_get:timeline.follow_request.user1)
  return p != nullptr ? *p : *reinterpret_cast<const ::timeline::user*>(
      &::timeline::_user_default_instance_);
}
inline ::timeline::user* follow_request::release_user1() {
  // @@protoc_insertion_point(field_release:timeline.follow_request.user1)
  
  ::timeline::user* temp = user1_;
  user1_ = nullptr;
  return temp;
}
inline ::timeline::user* follow_request::mutable_user1() {
  
  if (user1_ == nullptr) {
    auto* p = CreateMaybeMessage<::timeline::user>(GetArenaNoVirtual());
    user1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timeline.follow_request.user1)
  return user1_;
}
inline void follow_request::set_allocated_user1(::timeline::user* user1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user1_;
  }
  if (user1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user1, submessage_arena);
    }
    
  } else {
    
  }
  user1_ = user1;
  // @@protoc_insertion_point(field_set_allocated:timeline.follow_request.user1)
}

// .timeline.user user2 = 2;
inline bool follow_request::has_user2() const {
  return this != internal_default_instance() && user2_ != nullptr;
}
inline void follow_request::clear_user2() {
  if (GetArenaNoVirtual() == nullptr && user2_ != nullptr) {
    delete user2_;
  }
  user2_ = nullptr;
}
inline const ::timeline::user& follow_request::user2() const {
  const ::timeline::user* p = user2_;
  // @@protoc_insertion_point(field_get:timeline.follow_request.user2)
  return p != nullptr ? *p : *reinterpret_cast<const ::timeline::user*>(
      &::timeline::_user_default_instance_);
}
inline ::timeline::user* follow_request::release_user2() {
  // @@protoc_insertion_point(field_release:timeline.follow_request.user2)
  
  ::timeline::user* temp = user2_;
  user2_ = nullptr;
  return temp;
}
inline ::timeline::user* follow_request::mutable_user2() {
  
  if (user2_ == nullptr) {
    auto* p = CreateMaybeMessage<::timeline::user>(GetArenaNoVirtual());
    user2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timeline.follow_request.user2)
  return user2_;
}
inline void follow_request::set_allocated_user2(::timeline::user* user2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user2_;
  }
  if (user2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user2, submessage_arena);
    }
    
  } else {
    
  }
  user2_ = user2;
  // @@protoc_insertion_point(field_set_allocated:timeline.follow_request.user2)
}

// -------------------------------------------------------------------

// follow_response

// int32 success_status = 1;
inline void follow_response::clear_success_status() {
  success_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 follow_response::success_status() const {
  // @@protoc_insertion_point(field_get:timeline.follow_response.success_status)
  return success_status_;
}
inline void follow_response::set_success_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  success_status_ = value;
  // @@protoc_insertion_point(field_set:timeline.follow_response.success_status)
}

// -------------------------------------------------------------------

// unfollow_request

// .timeline.user user1 = 1;
inline bool unfollow_request::has_user1() const {
  return this != internal_default_instance() && user1_ != nullptr;
}
inline void unfollow_request::clear_user1() {
  if (GetArenaNoVirtual() == nullptr && user1_ != nullptr) {
    delete user1_;
  }
  user1_ = nullptr;
}
inline const ::timeline::user& unfollow_request::user1() const {
  const ::timeline::user* p = user1_;
  // @@protoc_insertion_point(field_get:timeline.unfollow_request.user1)
  return p != nullptr ? *p : *reinterpret_cast<const ::timeline::user*>(
      &::timeline::_user_default_instance_);
}
inline ::timeline::user* unfollow_request::release_user1() {
  // @@protoc_insertion_point(field_release:timeline.unfollow_request.user1)
  
  ::timeline::user* temp = user1_;
  user1_ = nullptr;
  return temp;
}
inline ::timeline::user* unfollow_request::mutable_user1() {
  
  if (user1_ == nullptr) {
    auto* p = CreateMaybeMessage<::timeline::user>(GetArenaNoVirtual());
    user1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timeline.unfollow_request.user1)
  return user1_;
}
inline void unfollow_request::set_allocated_user1(::timeline::user* user1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user1_;
  }
  if (user1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user1, submessage_arena);
    }
    
  } else {
    
  }
  user1_ = user1;
  // @@protoc_insertion_point(field_set_allocated:timeline.unfollow_request.user1)
}

// .timeline.user user2 = 2;
inline bool unfollow_request::has_user2() const {
  return this != internal_default_instance() && user2_ != nullptr;
}
inline void unfollow_request::clear_user2() {
  if (GetArenaNoVirtual() == nullptr && user2_ != nullptr) {
    delete user2_;
  }
  user2_ = nullptr;
}
inline const ::timeline::user& unfollow_request::user2() const {
  const ::timeline::user* p = user2_;
  // @@protoc_insertion_point(field_get:timeline.unfollow_request.user2)
  return p != nullptr ? *p : *reinterpret_cast<const ::timeline::user*>(
      &::timeline::_user_default_instance_);
}
inline ::timeline::user* unfollow_request::release_user2() {
  // @@protoc_insertion_point(field_release:timeline.unfollow_request.user2)
  
  ::timeline::user* temp = user2_;
  user2_ = nullptr;
  return temp;
}
inline ::timeline::user* unfollow_request::mutable_user2() {
  
  if (user2_ == nullptr) {
    auto* p = CreateMaybeMessage<::timeline::user>(GetArenaNoVirtual());
    user2_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timeline.unfollow_request.user2)
  return user2_;
}
inline void unfollow_request::set_allocated_user2(::timeline::user* user2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user2_;
  }
  if (user2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user2, submessage_arena);
    }
    
  } else {
    
  }
  user2_ = user2;
  // @@protoc_insertion_point(field_set_allocated:timeline.unfollow_request.user2)
}

// -------------------------------------------------------------------

// unfollow_response

// int32 success_status = 1;
inline void unfollow_response::clear_success_status() {
  success_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 unfollow_response::success_status() const {
  // @@protoc_insertion_point(field_get:timeline.unfollow_response.success_status)
  return success_status_;
}
inline void unfollow_response::set_success_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  success_status_ = value;
  // @@protoc_insertion_point(field_set:timeline.unfollow_response.success_status)
}

// -------------------------------------------------------------------

// list_request

// .timeline.user user1 = 1;
inline bool list_request::has_user1() const {
  return this != internal_default_instance() && user1_ != nullptr;
}
inline void list_request::clear_user1() {
  if (GetArenaNoVirtual() == nullptr && user1_ != nullptr) {
    delete user1_;
  }
  user1_ = nullptr;
}
inline const ::timeline::user& list_request::user1() const {
  const ::timeline::user* p = user1_;
  // @@protoc_insertion_point(field_get:timeline.list_request.user1)
  return p != nullptr ? *p : *reinterpret_cast<const ::timeline::user*>(
      &::timeline::_user_default_instance_);
}
inline ::timeline::user* list_request::release_user1() {
  // @@protoc_insertion_point(field_release:timeline.list_request.user1)
  
  ::timeline::user* temp = user1_;
  user1_ = nullptr;
  return temp;
}
inline ::timeline::user* list_request::mutable_user1() {
  
  if (user1_ == nullptr) {
    auto* p = CreateMaybeMessage<::timeline::user>(GetArenaNoVirtual());
    user1_ = p;
  }
  // @@protoc_insertion_point(field_mutable:timeline.list_request.user1)
  return user1_;
}
inline void list_request::set_allocated_user1(::timeline::user* user1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete user1_;
  }
  if (user1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user1, submessage_arena);
    }
    
  } else {
    
  }
  user1_ = user1;
  // @@protoc_insertion_point(field_set_allocated:timeline.list_request.user1)
}

// -------------------------------------------------------------------

// list_response

// repeated string followers = 1;
inline int list_response::followers_size() const {
  return followers_.size();
}
inline void list_response::clear_followers() {
  followers_.Clear();
}
inline const std::string& list_response::followers(int index) const {
  // @@protoc_insertion_point(field_get:timeline.list_response.followers)
  return followers_.Get(index);
}
inline std::string* list_response::mutable_followers(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.list_response.followers)
  return followers_.Mutable(index);
}
inline void list_response::set_followers(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:timeline.list_response.followers)
  followers_.Mutable(index)->assign(value);
}
inline void list_response::set_followers(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:timeline.list_response.followers)
  followers_.Mutable(index)->assign(std::move(value));
}
inline void list_response::set_followers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  followers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:timeline.list_response.followers)
}
inline void list_response::set_followers(int index, const char* value, size_t size) {
  followers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:timeline.list_response.followers)
}
inline std::string* list_response::add_followers() {
  // @@protoc_insertion_point(field_add_mutable:timeline.list_response.followers)
  return followers_.Add();
}
inline void list_response::add_followers(const std::string& value) {
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:timeline.list_response.followers)
}
inline void list_response::add_followers(std::string&& value) {
  followers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:timeline.list_response.followers)
}
inline void list_response::add_followers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  followers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:timeline.list_response.followers)
}
inline void list_response::add_followers(const char* value, size_t size) {
  followers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:timeline.list_response.followers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
list_response::followers() const {
  // @@protoc_insertion_point(field_list:timeline.list_response.followers)
  return followers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
list_response::mutable_followers() {
  // @@protoc_insertion_point(field_mutable_list:timeline.list_response.followers)
  return &followers_;
}

// repeated string active_users = 2;
inline int list_response::active_users_size() const {
  return active_users_.size();
}
inline void list_response::clear_active_users() {
  active_users_.Clear();
}
inline const std::string& list_response::active_users(int index) const {
  // @@protoc_insertion_point(field_get:timeline.list_response.active_users)
  return active_users_.Get(index);
}
inline std::string* list_response::mutable_active_users(int index) {
  // @@protoc_insertion_point(field_mutable:timeline.list_response.active_users)
  return active_users_.Mutable(index);
}
inline void list_response::set_active_users(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:timeline.list_response.active_users)
  active_users_.Mutable(index)->assign(value);
}
inline void list_response::set_active_users(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:timeline.list_response.active_users)
  active_users_.Mutable(index)->assign(std::move(value));
}
inline void list_response::set_active_users(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  active_users_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:timeline.list_response.active_users)
}
inline void list_response::set_active_users(int index, const char* value, size_t size) {
  active_users_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:timeline.list_response.active_users)
}
inline std::string* list_response::add_active_users() {
  // @@protoc_insertion_point(field_add_mutable:timeline.list_response.active_users)
  return active_users_.Add();
}
inline void list_response::add_active_users(const std::string& value) {
  active_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:timeline.list_response.active_users)
}
inline void list_response::add_active_users(std::string&& value) {
  active_users_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:timeline.list_response.active_users)
}
inline void list_response::add_active_users(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  active_users_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:timeline.list_response.active_users)
}
inline void list_response::add_active_users(const char* value, size_t size) {
  active_users_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:timeline.list_response.active_users)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
list_response::active_users() const {
  // @@protoc_insertion_point(field_list:timeline.list_response.active_users)
  return active_users_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
list_response::mutable_active_users() {
  // @@protoc_insertion_point(field_mutable_list:timeline.list_response.active_users)
  return &active_users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace timeline

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_timeline_2eproto
