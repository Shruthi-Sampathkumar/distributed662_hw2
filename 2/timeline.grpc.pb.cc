// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: timeline.proto

#include "timeline.pb.h"
#include "timeline.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace timeline {

static const char* social_network_method_names[] = {
  "/timeline.social_network/addTo",
  "/timeline.social_network/removeFrom",
  "/timeline.social_network/getFollowersUsers",
};

std::unique_ptr< social_network::Stub> social_network::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< social_network::Stub> stub(new social_network::Stub(channel));
  return stub;
}

social_network::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_addTo_(social_network_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_removeFrom_(social_network_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_getFollowersUsers_(social_network_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status social_network::Stub::addTo(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::timeline::follow_response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_addTo_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::timeline::follow_response>* social_network::Stub::AsyncaddToRaw(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::timeline::follow_response>::Create(channel_.get(), cq, rpcmethod_addTo_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::timeline::follow_response>* social_network::Stub::PrepareAsyncaddToRaw(::grpc::ClientContext* context, const ::timeline::follow_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::timeline::follow_response>::Create(channel_.get(), cq, rpcmethod_addTo_, context, request, false);
}

::grpc::Status social_network::Stub::removeFrom(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::timeline::unfollow_response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_removeFrom_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::timeline::unfollow_response>* social_network::Stub::AsyncremoveFromRaw(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::timeline::unfollow_response>::Create(channel_.get(), cq, rpcmethod_removeFrom_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::timeline::unfollow_response>* social_network::Stub::PrepareAsyncremoveFromRaw(::grpc::ClientContext* context, const ::timeline::unfollow_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::timeline::unfollow_response>::Create(channel_.get(), cq, rpcmethod_removeFrom_, context, request, false);
}

::grpc::Status social_network::Stub::getFollowersUsers(::grpc::ClientContext* context, const ::timeline::list_request& request, ::timeline::list_response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_getFollowersUsers_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::timeline::list_response>* social_network::Stub::AsyncgetFollowersUsersRaw(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::timeline::list_response>::Create(channel_.get(), cq, rpcmethod_getFollowersUsers_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::timeline::list_response>* social_network::Stub::PrepareAsyncgetFollowersUsersRaw(::grpc::ClientContext* context, const ::timeline::list_request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::timeline::list_response>::Create(channel_.get(), cq, rpcmethod_getFollowersUsers_, context, request, false);
}

social_network::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      social_network_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< social_network::Service, ::timeline::follow_request, ::timeline::follow_response>(
          std::mem_fn(&social_network::Service::addTo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      social_network_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< social_network::Service, ::timeline::unfollow_request, ::timeline::unfollow_response>(
          std::mem_fn(&social_network::Service::removeFrom), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      social_network_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< social_network::Service, ::timeline::list_request, ::timeline::list_response>(
          std::mem_fn(&social_network::Service::getFollowersUsers), this)));
}

social_network::Service::~Service() {
}

::grpc::Status social_network::Service::addTo(::grpc::ServerContext* context, const ::timeline::follow_request* request, ::timeline::follow_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status social_network::Service::removeFrom(::grpc::ServerContext* context, const ::timeline::unfollow_request* request, ::timeline::unfollow_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status social_network::Service::getFollowersUsers(::grpc::ServerContext* context, const ::timeline::list_request* request, ::timeline::list_response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace timeline

